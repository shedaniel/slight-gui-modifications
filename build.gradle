plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id 'maven-publish'
}

apply plugin: 'groovy'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
    accessWidener = file("src/main/resources/slight-gui-modifications.aw")
}

sourceSets {
    main {
        groovy { srcDirs += ['src/main/groovy'] }
    }
}

repositories {
    maven { 
        url "https://jitpack.io"
        
        content {
            includeGroup "com.github.Chocohead"
        }
    }
    maven { url "https://maven.shedaniel.me" }
    mavenCentral()
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings(minecraft.officialMojangMappings())
    optionally("net.fabricmc:fabric-loader:${project.loader_version}")

    modApi("net.fabricmc.fabric-api:fabric-api:${project.api_version}") {
        exclude(module: "fabric-biomes-v1")
    }
    depend("com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}")
    optionally("me.shedaniel:SmoothScrollingEverywhere:3.0.3-unstable")
    optionally("me.shedaniel:RoughlyEnoughItems:${project.rei_version}")
    optionally("io.github.prospector:modmenu:${project.modmenu_version}")
    depend("me.shedaniel:architectury:${project.architectury_version}:fabric")
    depend("me.shedaniel.cloth:config-2:${project.cloth_config}")
    depend("me.shedaniel.cloth.api:cloth-client-events-v0:${project.cloth_api}")
    depend("me.sargunvohra.mcmods:autoconfig1u:${project.autoconfig1u}")
    modApi("com.lettuce.fudge:artifice:${project.artifice_version}")
    modApi("org.codehaus.groovy:groovy-jsr223:3.0.3")
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"

    afterEvaluate {
        def listAdded = []
        def eachDep = null
        eachDep = { dep ->
            for (apiIncludeDepStr in (api_include as String).split(',')) {
                def apiIncludeGroup = apiIncludeDepStr.split(':')[0]
                def apiIncludeDep = apiIncludeDepStr.split(':')[1]
                if (dep.module.id.group == apiIncludeGroup && dep.module.id.name.startsWith(apiIncludeDep)) {
                    def version = dep.module.id.version.indexOf('@') >= 0 ? dep.module.id.version.substring(0, dep.module.id.version.indexOf('@')) : dep.module.id.version
                    def mavenDep = "${dep.module.id.group}:${dep.module.id.name}:$version"
                    if (!(mavenDep in listAdded)) {
                        include(mavenDep) {
                            transitive = false
                        }
                        listAdded.add(mavenDep)
                    }
                    break
                }
            }
            dep.children.each eachDep
        }

        configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each eachDep
        configurations.runtimeClasspath.resolvedConfiguration.firstLevelModuleDependencies.each eachDep
    }
}

def depend(str) {
    dependencies.modApi(str) {
        exclude(group: "net.fabricmc")
        exclude(group: "net.fabricmc.fabric-api")
    }
}

def optionally(str) {
    runtime(str)
    dependencies.modCompileOnly(str) {
        exclude(group: "net.fabricmc")
        exclude(group: "net.fabricmc.fabric-api")
    }
}

def runtime(str) {
    dependencies.modRuntime(str) {
        exclude(group: "net.fabricmc")
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
